name: Deploy to Amazon ECS

on:
  pull_request:
    branches: dev

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: sparta-final-project-team7-server-origin
  ECS_CLUSTER: sparta-final-project-ecs-cluster
  ECS_SERVICE: sparta-final-project-service
  ECS_TASK_DEFINITION: sparta-final-project-ecs-task
  CONTAINER_NAME: sparta-final-project-backend-core-deployment

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" > .env
          # echo "MYSQL_URI=${{ secrets.MYSQL_URI }}" >> .env
          # echo "ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}" >> .env
          # echo "REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}" >> .env
          # echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          # echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          # echo "SMTP_SECURE=${{ secrets.SMTP_SECURE }}" >> .env
          # echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> .env
          # echo "SMTP_PASS=${{ secrets.SMTP_PASS }}" >> .env
          # echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          # echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          # echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          # echo "REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}" >> .env
          # echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          # echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          # echo "GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}" >> .env
          # echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
          # echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> .env
          # echo "KAKAO_CALLBACK_URL=${{ secrets.KAKAO_CALLBACK_URL }}" >> .env
          # echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env
          # echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env
          # echo "NAVER_CALLBACK_URL=${{ secrets.NAVER_CALLBACK_URL }}" >> .env
          # echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          # echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          # echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          # echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "ENV_FILE=${{ secrets.ENV_FILE }}" >> .env

          docker build --build-arg ENV_FILE=.env -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get latest task definition revision
        id: get-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Render new task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # - name: Enable ECS execute-command
      #   run: |
      #     aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --enable-execute-command

      - name: Force deployment
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment
